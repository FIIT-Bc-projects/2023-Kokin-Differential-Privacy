2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_setup.py:_flush():76] Configure stats pid to 18748
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_setup.py:_flush():76] Loading settings from C:\Users\glebk\.config\wandb\settings
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_setup.py:_flush():76] Loading settings from D:\Study\BP\wandb\settings
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_setup.py:_flush():76] Loading settings from environment variables: {'project': 'sweeps-hyperparameter-tuning-in-privacy-preserving-machine-learning'}
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': 'scripts\\sweep_training.py', 'program': 'D:\\Study\\BP\\scripts\\sweep_training.py'}
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:_log_setup():506] Logging user logs to D:\Study\BP\wandb\run-20240302_010029-r0sf324p\logs\debug.log
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:_log_setup():507] Logging internal logs to D:\Study\BP\wandb\run-20240302_010029-r0sf324p\logs\debug-internal.log
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:init():546] calling init triggers
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:init():552] wandb.init called with sweep_config: {}
config: {'_name': 'wandb.config', '__doc__': 'Config object.\n\n    Config objects are intended to hold all of the hyperparameters associated with\n    a wandb run and are saved with the run object when `wandb.init` is called.\n\n    We recommend setting `wandb.config` once at the top of your training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\n    You can create a file called `config-defaults.yaml`, and it will automatically be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    You can also load a config YAML file with your custom name and pass the filename\n    into `wandb.init(config="special_config.yaml")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Using wandb.init to set config\n        ```\n        wandb.init(config={"epochs": 4, "batch_size": 32})\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Nested configs\n        ```\n        wandb.config[\'train\'][\'epochs\'] = 4\n        wandb.init()\n        for x in range(wandb.config[\'train\'][\'epochs\']):\n            # train\n        ```\n\n        Using absl flags\n        ```\n        flags.DEFINE_string(‘model’, None, ‘model to run’) # name, default, help\n        wandb.config.update(flags.FLAGS) # adds all absl flags to config\n        ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\n            "-b",\n            "--batch-size",\n            type=int,\n            default=8,\n            metavar="N",\n            help="input batch size for training (default: 8)",\n        )\n        args = parser.parse_args()\n        wandb.config.update(args)\n        ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n        ```python\n        flags = tf.app.flags\n        flags.DEFINE_string("data_dir", "/tmp/data")\n        flags.DEFINE_integer("batch_size", 128, "Batch size.")\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags to config\n        ```\n    '}
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:init():602] starting backend
2024-03-02 01:00:29,686 INFO    MainThread:18748 [wandb_init.py:init():606] setting up manager
2024-03-02 01:00:29,689 INFO    MainThread:18748 [backend.py:_multiprocessing_setup():106] multiprocessing start_methods=spawn, using: spawn
2024-03-02 01:00:29,692 INFO    MainThread:18748 [wandb_init.py:init():613] backend started and connected
2024-03-02 01:00:29,694 INFO    MainThread:18748 [wandb_init.py:init():701] updated telemetry
2024-03-02 01:00:29,731 INFO    MainThread:18748 [wandb_init.py:init():741] communicating run to backend with 60.0 second timeout
2024-03-02 01:00:30,139 INFO    MainThread:18748 [wandb_run.py:_on_init():2133] communicating current version
2024-03-02 01:00:30,181 INFO    MainThread:18748 [wandb_run.py:_on_init():2142] got version response upgrade_message: "wandb version 0.16.3 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"

2024-03-02 01:00:30,181 INFO    MainThread:18748 [wandb_init.py:init():789] starting run threads in backend
2024-03-02 01:00:30,325 INFO    MainThread:18748 [wandb_run.py:_console_start():2114] atexit reg
2024-03-02 01:00:30,325 INFO    MainThread:18748 [wandb_run.py:_redirect():1969] redirect: SettingsConsole.WRAP_RAW
2024-03-02 01:00:30,325 INFO    MainThread:18748 [wandb_run.py:_redirect():2034] Wrapping output streams.
2024-03-02 01:00:30,325 INFO    MainThread:18748 [wandb_run.py:_redirect():2059] Redirects installed.
2024-03-02 01:00:30,325 INFO    MainThread:18748 [wandb_init.py:init():831] run started, returning control to user process
2024-03-02 01:00:42,422 WARNING MsgRouterThr:18748 [router.py:message_loop():77] message_loop has been closed
